import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.config import BOT_TOKEN, ADMIN_ID
from bot.database import db, sticker_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_name = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π
admin_message_id = None
game_active = False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", request_contact=False))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if game_active:
        keyboard.add(KeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é"))
    else:
        keyboard.add(KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
async def update_admin_message():
    global admin_message_id
    
    players = db.get_all_players()
    total_cars = sticker_manager.get_all_cars_count()
    
    message_text = "üéÆ *–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!*\n\n" if game_active else "‚è∏ *–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
    message_text += "üìä *–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:*\n"
    
    if not players:
        message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"
    else:
        for i, player in enumerate(players, 1):
            collected_count = len(player['collected_stickers'])
            message_text += f"{i}. {player['first_name']} {player['last_name']} - {collected_count}/{total_cars}\n"
    
    if admin_message_id:
        try:
            await bot.edit_message_text(
                chat_id=ADMIN_ID,
                message_id=admin_message_id,
                text=message_text,
                parse_mode='Markdown'
            )
        except:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            msg = await bot.send_message(ADMIN_ID, message_text, parse_mode='Markdown')
            admin_message_id = msg.message_id
    else:
        msg = await bot.send_message(ADMIN_ID, message_text, parse_mode='Markdown')
        admin_message_id = msg.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        # –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())
        await update_admin_message()
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã RetroAuto!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –ª—é–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ –∞–≤—Ç–æ, "
        "–Ω–æ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö.\n"
        "–ó–∞ –∫–∞–∂–¥—ã–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QR-–∫–æ–¥ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∏–∫–µ—Ä. –í –∫–æ–Ω—Ü–µ –≤—ã—Å—Ç–∞–≤–∫–∏ –≤–∞—Å –∂–¥—ë—Ç —Ç–µ—Å—Ç —Å –ø—Ä–∏–∑–∞–º–∏. "
        "–¢–æ—Ç, –∫—Ç–æ —Å–æ–±–µ—Ä—ë—Ç –≤–µ—Å—å —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–∏—Ç –≤–µ—â—å –Ω–∞—à–µ–≥–æ –º–µ—Ä—á–∞.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –í–ø–µ—Ä–µ–¥!"
    )
    
    await message.answer(welcome_text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
    await UserState.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=UserState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name_parts = message.text.split()
    if len(name_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return
    
    first_name = name_parts[0]
    last_name = ' '.join(name_parts[1:])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_player(
        message.from_user.id,
        message.from_user.username,
        first_name,
        last_name
    )
    
    await state.finish()
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {first_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã —Ä—è–¥–æ–º —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏.",
        reply_markup=get_user_keyboard()
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if game_active:
        await update_admin_message()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"
@dp.message_handler(lambda message: message.text == "–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
async def scan_qr(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
    await message.answer(
        "–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É", switch_inline_query_current_chat="")
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR)
@dp.inline_handler()
async def handle_qr_scan(inline_query: types.InlineQuery):
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    results = []
    cars = [
        {"id": "chevy_57", "title": "Chevrolet Bel Air", "description": "1957 –≥–æ–¥"},
        {"id": "mercedes_gullwing", "title": "Mercedes Gullwing", "description": "1954 –≥–æ–¥"},
        {"id": "jaguar_etype", "title": "Jaguar E-Type", "description": "1961 –≥–æ–¥"},
        {"id": "ford_mustang", "title": "Ford Mustang", "description": "1964 –≥–æ–¥"},
        {"id": "cadillac_59", "title": "Cadillac Series 62", "description": "1959 –≥–æ–¥"},
    ]
    
    for car in cars:
        results.append(types.InlineQueryResultArticle(
            id=car["id"],
            title=car["title"],
            description=car["description"],
            input_message_content=types.InputTextMessageContent(
                message_text=f"–°–∫–∞–Ω–∏—Ä—É—é {car['title']}..."
            )
        ))
    
    await bot.answer_inline_query(inline_query.id, results)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ inline-–∑–∞–ø—Ä–æ—Å–∞
@dp.message_handler(lambda message: message.text.startswith('–°–∫–∞–Ω–∏—Ä—É—é'))
async def process_qr_scan(message: types.Message):
    user_id = message.from_user.id
    player = db.get_player(user_id)
    
    if not player:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    car_name = message.text.replace('–°–∫–∞–Ω–∏—Ä—É—é ', '').replace('...', '')
    car_id = None
    
    for cid, car in sticker_manager.CARS.items():
        if car['name'].split(' (')[0] in car_name:
            car_id = cid
            break
    
    if not car_id:
        await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    car_info = sticker_manager.get_car_info(car_id)
    
    if not car_info:
        await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if car_id in player['collected_stickers']:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")
        await message.answer(car_info['info'], parse_mode='Markdown')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    db.add_sticker_to_player(user_id, car_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        await message.answer_sticker(car_info['sticker'])
    except:
        await message.answer("üéâ –°—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω!")
    
    await message.answer(car_info['info'], parse_mode='Markdown')
    await message.answer("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!", reply_markup=get_user_keyboard())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –∞–¥–º–∏–Ω–∞
    if game_active:
        await update_admin_message()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é" and message.from_user.id == ADMIN_ID)
async def start_game_session(message: types.Message):
    global game_active
    game_active = True
    db.start_game_session()
    await message.answer("–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞!", reply_markup=get_admin_keyboard())
    await update_admin_message()

@dp.message_handler(lambda message: message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é" and message.from_user.id == ADMIN_ID)
async def end_game_session(message: types.Message):
    global game_active
    game_active = False
    db.end_game_session()
    await message.answer("–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_admin_keyboard())
    await update_admin_message()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
